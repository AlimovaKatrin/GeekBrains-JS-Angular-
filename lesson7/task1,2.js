1. Продумать, где можно применить замыкания.

  ну мы их используем практически везде. 
  любая переменная которая обьявлена в лексическом окружении функции и
   кторая используется в этой самой функции
  по сути будет замкнута в ней. Наверно это самый каждодневный пример замыкания

2. Не выполняя код, ответить, что выведет браузер и почему:
a.

if (!("a" in window)) {
var a = 1;
}
alert(a);

если мы не определили а до этого, то а = 1. алерт покажет нам 1.
констркуция  "a" in window покажет фолс, а !() поменяет на тру. 
у нас определится переменная а которая равна 1

b.

var b = function a(x) {
x && a(--x);
};
alert(a);

ну если верхняя задача действует то а так и останется 1.
а если нет то а будет функцией. но тут вопросик покажет ли его нам браузер.
мне кажется что нет, так как а закрыта в б.  
c.

function a(x) {
return x * 2;
}
var a;
alert(a);

вот тут не совсем адекватно могу обьяснить что происходит. 
по идее js прошелся первый раз: определил переменные, потом прошелся второй раз и заполнил их занчениями.
НО ведь функции сразу определяются со занчениями. 
а если мы ничего не положили в переменную и просто ее обьявили,
вполне возможно что js пользуется именно функцией раз простая переменная пустая. 
или вообще перезаписывает. 
поэтому мне кажется что а будет функцией.

d.

function b(x, y, a) {
arguments[2] = 10;
alert(a);
}
b(1, 2, 3);
ну тут изи, мы передаем три аргумента , а третий меняем прям внутри скоупа.
что бы мы не пытались передать в качестве a аргумента он будет 10.
e. *
это документация MDN когда налл то происходит автозамена на глобальный обьект
function a() {
alert(this);
}
a.call(null);